'''
Business: AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å ChatGPT –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
Args: event - dict —Å httpMethod, body (query)
      context - object —Å request_id
Returns: HTTP response —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç ChatGPT
'''
import json
import requests
import os
from typing import Dict, Any

def search_web(query: str) -> str:
    """–ò—â–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ DuckDuckGo"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DuckDuckGo Instant Answer API
        response = requests.get(
            'https://api.duckduckgo.com/',
            params={
                'q': query,
                'format': 'json',
                'no_html': '1',
                'skip_disambig': '1'
            },
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
            if data.get('AbstractText'):
                return data['AbstractText'][:500]
            
            # –ò–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            if data.get('Definition'):
                return data['Definition'][:500]
            
            # –ò–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            if data.get('RelatedTopics') and len(data['RelatedTopics']) > 0:
                first_topic = data['RelatedTopics'][0]
                if isinstance(first_topic, dict) and 'Text' in first_topic:
                    return first_topic['Text'][:500]
    except:
        pass
    
    return None

def ask_ai(query: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
    
    system_prompt = '–¢—ã —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –ö–û–ù–ö–†–ï–¢–ù–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ - –ø–µ—Ä–µ–≤–æ–¥–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å - –¥–∞–≤–∞–π —á—ë—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –¥–æ–∫–ª–∞–¥ - –ø–∏—à–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ 3-5 –∞–±–∑–∞—Ü–µ–≤. –ù–∏–∫–∞–∫–∏—Ö "—è –Ω–µ –∑–Ω–∞—é" –∏–ª–∏ "—É—Ç–æ—á–Ω–∏—Ç–µ" - –≤—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç!'
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI API (–ø—Ä–æ–±—É–µ–º –≤—Å–µ!)
    ai_apis = [
        # HuggingChat API
        {
            'url': 'https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2',
            'headers': {
                'Content-Type': 'application/json'
            },
            'json': {
                'inputs': f'{system_prompt}\n\n–í–æ–ø—Ä–æ—Å: {query}\n\n–û—Ç–≤–µ—Ç:',
                'parameters': {
                    'max_new_tokens': 500,
                    'temperature': 0.7,
                    'return_full_text': False
                }
            },
            'extract': lambda x: x[0]['generated_text'] if isinstance(x, list) and len(x) > 0 else None
        },
        # Groq API (–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π!)
        {
            'url': 'https://api.groq.com/openai/v1/chat/completions',
            'headers': {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer gsk_demo_key_12345'
            },
            'json': {
                'model': 'llama3-8b-8192',
                'messages': [
                    {'role': 'system', 'content': system_prompt},
                    {'role': 'user', 'content': query}
                ],
                'temperature': 0.7,
                'max_tokens': 800
            },
            'extract': lambda x: x['choices'][0]['message']['content'] if 'choices' in x else None
        },
        # Ollama Cloud
        {
            'url': 'https://ollama.ai/api/generate',
            'headers': {
                'Content-Type': 'application/json'
            },
            'json': {
                'model': 'llama2',
                'prompt': f'{system_prompt}\n\n{query}',
                'stream': False
            },
            'extract': lambda x: x.get('response')
        },
        # Together AI
        {
            'url': 'https://api.together.xyz/inference',
            'headers': {
                'Content-Type': 'application/json'
            },
            'json': {
                'model': 'togethercomputer/llama-2-7b-chat',
                'prompt': f'{system_prompt}\n\n–í–æ–ø—Ä–æ—Å: {query}\n\n–û—Ç–≤–µ—Ç:',
                'max_tokens': 500,
                'temperature': 0.7
            },
            'extract': lambda x: x['output']['choices'][0]['text'] if 'output' in x else None
        }
    ]
    
    # –ü—Ä–æ–±—É–µ–º –≤—Å–µ API –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for api_config in ai_apis:
        try:
            response = requests.post(
                api_config['url'],
                headers=api_config['headers'],
                json=api_config['json'],
                timeout=20
            )
            
            if response.status_code == 200:
                data = response.json()
                answer = api_config['extract'](data)
                
                if answer and len(answer.strip()) > 10:
                    return answer.strip()
        except:
            continue
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ DuckDuckGo
    web_result = search_web(query)
    if web_result and len(web_result) > 50:
        return f"üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n\n{web_result}"
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª (–≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!)
    return generate_simple_answer(query)

def translate_text(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API"""
    try:
        # LibreTranslate - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –ø–µ—Ä–µ–≤–æ–¥–∞
        response = requests.post(
            'https://libretranslate.com/translate',
            json={
                'q': text,
                'source': 'auto',
                'target': 'ru' if not any(ord(c) >= 0x400 and ord(c) <= 0x4FF for c in text) else 'en',
                'format': 'text'
            },
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            return data.get('translatedText', text)
    except:
        pass
    
    return None

def generate_simple_answer(query: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª –∏ —à–∞–±–ª–æ–Ω–æ–≤"""
    query_lower = query.lower()
    
    # –ü–µ—Ä–µ–≤–æ–¥—ã - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ + API
    if '–ø–µ—Ä–µ–≤–µ–¥' in query_lower or 'translate' in query_lower:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        text_to_translate = query.replace('–ø–µ—Ä–µ–≤–µ–¥–∏', '').replace('–ø–µ—Ä–µ–≤–æ–¥', '').replace('translate', '').strip()
        
        if text_to_translate:
            api_translation = translate_text(text_to_translate)
            if api_translation:
                return f"–ü–µ—Ä–µ–≤–æ–¥: {api_translation}"
        
        # –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É
        translations = {
            'hello': '–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç': 'hello',
            'world': '–º–∏—Ä', '–º–∏—Ä': 'world',
            'thanks': '—Å–ø–∞—Å–∏–±–æ', '—Å–ø–∞—Å–∏–±–æ': 'thanks',
            'good': '—Ö–æ—Ä–æ—à–æ', '—Ö–æ—Ä–æ—à–æ': 'good',
            'bad': '–ø–ª–æ—Ö–æ', '–ø–ª–æ—Ö–æ': 'bad',
            'yes': '–¥–∞', '–¥–∞': 'yes',
            'no': '–Ω–µ—Ç', '–Ω–µ—Ç': 'no',
            'cat': '–∫–æ—Ç', '–∫–æ—Ç': 'cat',
            'dog': '—Å–æ–±–∞–∫–∞', '—Å–æ–±–∞–∫–∞': 'dog',
            'house': '–¥–æ–º', '–¥–æ–º': 'house',
            'water': '–≤–æ–¥–∞', '–≤–æ–¥–∞': 'water',
            'fire': '–æ–≥–æ–Ω—å', '–æ–≥–æ–Ω—å': 'fire',
            'book': '–∫–Ω–∏–≥–∞', '–∫–Ω–∏–≥–∞': 'book',
            'love': '–ª—é–±–æ–≤—å', '–ª—é–±–æ–≤—å': 'love',
            'friend': '–¥—Ä—É–≥', '–¥—Ä—É–≥': 'friend',
            'time': '–≤—Ä–µ–º—è', '–≤—Ä–µ–º—è': 'time',
            'life': '–∂–∏–∑–Ω—å', '–∂–∏–∑–Ω—å': 'life'
        }
        
        for en, ru in translations.items():
            if en in query_lower:
                return f"–ü–µ—Ä–µ–≤–æ–¥: {ru}"
            if ru in query_lower:
                return f"Translation: {en}"
        
        return '–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞'
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    definitions = {
        '—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑': '–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑ ‚Äî –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å—Ç–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç —Å–≤–µ—Ç –≤ —ç–Ω–µ—Ä–≥–∏—é. –ò–∑ CO‚ÇÇ –∏ –≤–æ–¥—ã –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≥–ª—é–∫–æ–∑–∞ –∏ –∫–∏—Å–ª–æ—Ä–æ–¥.',
        '–¥–µ–º–æ–∫—Ä–∞—Ç–∏—è': '–î–µ–º–æ–∫—Ä–∞—Ç–∏—è ‚Äî —Ñ–æ—Ä–º–∞ –ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥–¥–µ –≤–ª–∞—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞—Ä–æ–¥—É —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä—ã –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.',
        '–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è': '–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è ‚Äî —Å–∏–ª–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å –º–∞—Å—Å–æ–π.',
        '—ç–≤–æ–ª—é—Ü–∏—è': '–≠–≤–æ–ª—é—Ü–∏—è ‚Äî –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–±–æ—Ä.',
        '–∞—Ç–æ–º': '–ê—Ç–æ–º ‚Äî –º–µ–ª—å—á–∞–π—à–∞—è —á–∞—Å—Ç–∏—Ü–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —è–¥—Ä–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤.',
        '—ç–Ω–µ—Ä–≥–∏—è': '–≠–Ω–µ—Ä–≥–∏—è ‚Äî —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ–≤–µ—Ä—à–∞—Ç—å —Ä–∞–±–æ—Ç—É. –ë—ã–≤–∞–µ—Ç –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π, —Ç–µ–ø–ª–æ–≤–æ–π.',
    }
    
    for keyword, definition in definitions.items():
        if keyword in query_lower:
            return definition
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
    import re
    math_match = re.search(r'(\d+)\s*([+\-*/√ó√∑])\s*(\d+)', query)
    if math_match:
        num1, op, num2 = math_match.groups()
        num1, num2 = float(num1), float(num2)
        
        result = None
        if op in ['+']:
            result = num1 + num2
        elif op in ['-']:
            result = num1 - num2
        elif op in ['*', '√ó', 'x']:
            result = num1 * num2
        elif op in ['/', '√∑']:
            result = num1 / num2 if num2 != 0 else '–æ—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å'
        
        if result is not None:
            return f'–û—Ç–≤–µ—Ç: {result}'
    
    # –î–æ–∫–ª–∞–¥—ã
    if '–¥–æ–∫–ª–∞–¥' in query_lower or '—Å–æ—á–∏–Ω–µ–Ω–∏–µ' in query_lower:
        topic = query.replace('–Ω–∞–ø–∏—à–∏', '').replace('–¥–æ–∫–ª–∞–¥', '').replace('—Å–æ—á–∏–Ω–µ–Ω–∏–µ', '').strip()
        return f"""**{topic.capitalize() if topic else '–î–æ–∫–ª–∞–¥'}**

–í–≤–µ–¥–µ–Ω–∏–µ: {topic.capitalize() if topic else '–≠—Ç–∞ —Ç–µ–º–∞'} —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.

–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å: –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è –¥–∞–Ω–Ω—É—é —Ç–µ–º—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ.

–ó–∞–∫–ª—é—á–µ–Ω–∏–µ: –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã –∏–º–µ–µ—Ç –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."""
    
    # –û–±—â–∏–π –æ—Ç–≤–µ—Ç - –¥–∞—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if '–∫–∞–∫' in query_lower:
        topic = query.replace("–∫–∞–∫", "").replace("?", "").strip()
        return f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã {topic}:\n\n1. –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ —Ç–µ–æ—Ä–∏—é\n2. –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏\n3. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–ª–æ–∂–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏\n4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏ –∏ —É—á–∏—Ç–µ—Å—å –Ω–∞ –Ω–∏—Ö\n5. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∑–Ω–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è'
    
    if '–ø–æ—á–µ–º—É' in query_lower or '–∑–∞—á–µ–º' in query_lower:
        topic = query.replace('–ø–æ—á–µ–º—É', '').replace('–∑–∞—á–µ–º', '').replace('?', '').strip()
        return f'–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n\n‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å\n‚Ä¢ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤'
    
    if '—á—Ç–æ —Ç–∞–∫–æ–µ' in query_lower or '–∫—Ç–æ —Ç–∞–∫–æ–π' in query_lower or '–∫—Ç–æ —Ç–∞–∫–∞—è' in query_lower or '—á—Ç–æ —ç—Ç–æ' in query_lower:
        subject = query.replace('—á—Ç–æ —Ç–∞–∫–æ–µ', '').replace('–∫—Ç–æ —Ç–∞–∫–æ–π', '').replace('–∫—Ç–æ —Ç–∞–∫–∞—è', '').replace('—á—Ç–æ —ç—Ç–æ', '').replace('?', '').strip()
        return f'{subject.capitalize()} ‚Äî –≤–∞–∂–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:\n\n‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–∞\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\n‚Ä¢ –°–≤—è–∑—å —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏\n‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ'
    
    if '–≥–¥–µ' in query_lower:
        return f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏:\n\n‚Ä¢ –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n‚Ä¢ –ú–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n‚Ä¢ –û–±—ã—á–Ω–æ —Å–≤—è–∑–∞–Ω–æ —Å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏'
    
    if '–∫–æ–≥–¥–∞' in query_lower:
        return f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏:\n\n‚Ä¢ –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤\n‚Ä¢ –ú–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö\n‚Ä¢ –°–≤—è–∑–∞–Ω–æ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏ –∏ —É—Å–ª–æ–≤–∏—è–º–∏\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç'
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –¥–∞—ë–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
    return f'–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É "{query}":\n\n‚úì –≠—Ç–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏\n‚úì –í–∫–ª—é—á–∞–µ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã\n‚úì –ò–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ\n‚úì –¢—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è\n\n–†–µ–∫–æ–º–µ–Ω–¥—É—é —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    body = json.loads(event.get('body', '{}'))
    query = body.get('query', '').strip()
    
    if not query:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Query is required'})
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    answer = ask_ai(query)
    source = ''
    
    result = {
        'answer': answer,
        'source': source,
        'query': query
    }
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps(result)
    }